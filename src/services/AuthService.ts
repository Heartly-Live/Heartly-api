import { Repository } from "typeorm";
import { AppDataSource } from "../db/AppDataSource";
import { User } from "../models/User";
import ethUtils from "ethereumjs-util";
import { generateToken } from "../middlewares/AuthMiddleware";
import { SiweMessage } from "siwe";
import crypto from "crypto";

const userRepository: Repository<User> = AppDataSource.getRepository(User);

export async function requestNonce(walletAddress: string) {
  const user = await userRepository.findOne({
    where: { walletAddress },
  });
  if (!user) return;
  return user.nonce;
}

export async function verifySignature(
  walletAddress: string,
  message: string,
  signature: string,
) {
  const siweMessage = new SiweMessage(message);

  const user = await userRepository.findOne({
    where: { walletAddress },
  });
  if (!user) return;

  const storedNonce = user.nonce;
  try {
    const { data: message } = await siweMessage.verify({
      signature: signature,
      nonce: storedNonce,
    });

    const token = generateToken({
      username: user.username,
      walletAddress: user.walletAddress,
    });
    console.log("Token generated by service", token);

    user.nonce = crypto.randomBytes(16).toString("hex");
    await userRepository.save(user);
    return token;
  } catch (error) {
    return;
  }
}
